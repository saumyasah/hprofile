name: CI/CD Actions
on: workflow_dispatch
env:
  AWS_REGION: ap-southeast-2
jobs:
  Testing:
    runs-on: ubuntu-latest
    steps:
      - name: Code Checkout # source code cloning
        uses: actions/checkout@v4 # to use checkout@v4 tool from github action marketplace

      - name: Maven test # to run the Maven commands
        run: mvn test
      
      - name: Checkstyle Analysis # for Checkstyle 
        run: mvn checkstyle:checkstyle
      
      - name: Set JAVA 11 # setting up JAVA as a dependency by sonar scanner
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin' # from java eclipes, you can find this in marketplace
          java-version: '11'

      - name: Setup SonarQube # Setup Sonar Scanner
        uses: warchant/setup-sonar-scanner@v7

      - name: SonarQube Scan # Run command commands of Sonar Scanner
      # Dsonar.sources=src/ to scan the src code of app, Dsonar.junit.reportsPath will give unit test result path, Dsonar.jacoco.reportsPath will get created when mvn test is run
        run: sonar-scanner
             -Dsonar.host.url=${{ secrets.SONAR_URL }}
             -Dsonar.login=${{ secrets.SONAR_TOKEN }}
             -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }}
             -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}
             -Dsonar.sources=src/
             -Dsonar.junit.reportsPath=target/surefire-reports/
             -Dsonar.jacoco.reportsPath=target/jacoco.exec
             -Dsonar.java.checkstyle.reportPaths=target/checkstyle-result.xml
             -Dsonar.java.binaries=target/test-classes/com/visualpathit/account
      
      # Check the Quality Gate status.
      - name: SonarQube Quality Gate check
        id: sonarqube-quality-gate-check # used to refer this step in another (not used in our project)
        uses: sonarsource/sonarqube-quality-gate-action@master
        with:
          pollingTimeoutSec: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_URL }} #OPTIONAL

  BUILD_AND_PUBLISH:
    needs: Testing
    runs-on: ubuntu-latest
    steps:
      - name: Code Checkout # source code cloning
        uses: actions/checkout@v4 # to use checkout@v4 tool from github action marketplace
      
      - name: Update app.properties file
        run: |
          sed -i "s/^jdbc.username.*$/jdbc.username\=${{ secrets.AWS_RDS_USER }}/" src/main/resources/application.properties 
          sed -i "s/^jdbc.password.*$/jdbc.password\=${{ secrets.AWS_RDS_PASS }}/" src/main/resources/application.properties 
          sed -i "s/db01/${{ secrets.AWS_RDS_ENDPOINT }}/" src/main/resources/application.properties

      - name: Build & Upload Image to ECR
        uses: appleboy/docker-ecr-action@master
        with:
          access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          secret_key: ${{ secrets.AWS_SECRET_KEY_ID }}
          registry: ${{ secrets.AWS_REGISTRY }}
          repo: actapp
          region: ${{ secrets.AWS_REGION }}
          auto_tag: latest,${{ github.run_number }}
          daemon_off: false
          dockerfile: ./Dockerfile
          context: ./